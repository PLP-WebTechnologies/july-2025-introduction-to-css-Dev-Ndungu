#ASS 1 
# Base class
class Device:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def device_info(self):
        return f"{self.brand} {self.model}"

# Derived class
class Smartphone(Device):
    def __init__(self, brand, model, os, storage):
        super().__init__(brand, model)  # Call parent constructor
        self.os = os
        self.storage = storage

    def call(self, number):
        print(f"üìû Calling {number} using {self.device_info()}...")

    def install_app(self, app_name):
        print(f"üì≤ Installing {app_name} on {self.device_info()}")

    def phone_info(self):
        return f"Brand: {self.brand}, Model: {self.model}, OS: {self.os}, Storage: {self.storage}GB"


# Create objects
phone1 = Smartphone("Apple", "iPhone 15", "iOS", 256)
phone2 = Smartphone("Samsung", "Galaxy S23", "Android", 512)

# Using methods
print(phone1.phone_info())
phone1.call("+254700123456")
phone1.install_app("WhatsApp")

print("\n" + phone2.phone_info())
phone2.call("+254711654321")
phone2.install_app("TikTok")


ASS 2 





# Base class
class Animal:
    def move(self):
        pass  # To be overridden

# Derived classes
class Dog(Animal):
    def move(self):
        print("üêï The dog runs on four legs.")

class Bird(Animal):
    def move(self):
        print("üê¶ The bird flies in the sky.")

class Fish(Animal):
    def move(self):
        print("üêü The fish swims in the water.")

# Polymorphism in action
animals = [Dog(), Bird(), Fish()]

for animal in animals:
    animal.move()
